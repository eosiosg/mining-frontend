/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

// const BASE_PATH = "http://13.250.41.73:18080".replace(/\/+$/, "");
const BASE_PATH = process.env.NODE_ENV === "development" 
                    ? "".replace(/\/+$/, "")
                    : "/api".replace(/\/+$/, "")

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountInfo
 */
export interface AccountInfo {
    /**
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    accountName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    bosBalanceCny?: string;
    bosBalance?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    eosBalanceCny?: string;
    eosBalance?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    lastReward?: string;
    /**
     * 
     * @type {number}
     * @memberof AccountInfo
     */
    minerCount?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    totalReward?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    availableBosOutside?: string;
}

/**
 * 
 * @export
 * @interface ForgeInfo
 */
export interface ForgeInfo {
    /**
     * 
     * @type {number}
     * @memberof ForgeInfo
     */
    endTimestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof ForgeInfo
     */
    estimatedRewardPer10KBos?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgeInfo
     */
    totalEos?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgeInfo
     */
    totalBos?: string;
    serverTimestamp?: number;
}

/**
 * 
 * @export
 * @interface ForgePage
 */
export interface ForgePage {
    /**
     * 
     * @type {AccountInfo}
     * @memberof ForgePage
     */
    accountInfo?: AccountInfo;
    /**
     * 
     * @type {string}
     * @memberof ForgePage
     */
    estimatedEos?: string;
    /**
     * 
     * @type {ForgeInfo}
     * @memberof ForgePage
     */
    forgeInfo?: ForgeInfo;
    /**
     * 
     * @type {string}
     * @memberof ForgePage
     */
    myBosInForge?: string;
}

/**
 * 
 * @export
 * @interface MinePage
 */
export interface MinePage {
    /**
     * 
     * @type {AccountInfo}
     * @memberof MinePage
     */
    accountInfo?: AccountInfo;
    /**
     * 
     * @type {PoolInfo}
     * @memberof MinePage
     */
    poolInfo?: PoolInfo;
    /**
     * 
     * @type {Array<MinerTradeInfo>}
     * @memberof MinePage
     */
    recentTrades?: Array<MinerTradeInfo>;
}

/**
 * 
 * @export
 * @interface MinerDetailPage
 */
export interface MinerDetailPage {
    /**
     * 
     * @type {MinerInfo}
     * @memberof MinerDetailPage
     */
    minerInfo?: MinerInfo;
    /**
     * 
     * @type {PageMinerRewardDetail}
     * @memberof MinerDetailPage
     */
    recentRewards?: PageMinerRewardDetail;
}

/**
 * 
 * @export
 * @interface MinerInfo
 */
export interface MinerInfo {
    /**
     * 
     * @type {string}
     * @memberof MinerInfo
     */
    minerId?: string;
    /**
     * 
     * @type {string}
     * @memberof MinerInfo
     */
    pow?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MinerInfo
     */
    sold?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MinerInfo
     */
    totalRewardInCny?: string;
    /**
     * 
     * @type {string}
     * @memberof MinerInfo
     */
    totalRewardInEos?: string;
}

/**
 * 
 * @export
 * @interface MinerRewardDetail
 */
export interface MinerRewardDetail {
    /**
     * 
     * @type {string}
     * @memberof MinerRewardDetail
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof MinerRewardDetail
     */
    reward?: string;
    /**
     * 
     * @type {number}
     * @memberof MinerRewardDetail
     */
    rewardTimestamp?: number;
}
/**
 * 
 * @export
 * @interface ForgeTradeInfo
 */
export interface ForgeTradeInfo {
    /**
     * 
     * @type {string}
     * @memberof ForgeTradeInfo
     */
    account?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgeTradeInfo
     */
    link?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ForgeTradeInfo
     */
    melt?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgeTradeInfo
     */
    tradeBos?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgeTradeInfo
     */
    tradeEos?: string;    
    /**
    * 
    * @type {number}
    * @memberof ForgeTradeInfo
    */
   tradeTimestamp?: number;
}

/**
 * 
 * @export
 * @interface MinerTradeInfo
 */
export interface MinerTradeInfo {
    /**
     * 
     * @type {string}
     * @memberof MinerTradeInfo
     */
    account?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MinerTradeInfo
     */
    buy?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MinerTradeInfo
     */
    tradeAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof MinerTradeInfo
     */
    tradeBos?: string;
    /**
     * 
     * @type {string}
     * @memberof MinerTradeInfo
     */
    tradeEos?: string;
    /**
     * 
     * @type {number}
     * @memberof MinerTradeInfo
     */
    tradeTimestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof MinerTradeInfo
     */
    link?: string;
}

/**
 * 
 * @export
 * @interface PageMinerInfo
 */
export interface PageMinerInfo {
    /**
     * 
     * @type {Array<MinerInfo>}
     * @memberof PageMinerInfo
     */
    content?: Array<MinerInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerInfo
     */
    empty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerInfo
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerInfo
     */
    last?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageMinerInfo
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMinerInfo
     */
    numberOfElements?: number;
    /**
     * 
     * @type {Pageable}
     * @memberof PageMinerInfo
     */
    pageable?: Pageable;
    /**
     * 
     * @type {number}
     * @memberof PageMinerInfo
     */
    size?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageMinerInfo
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageMinerInfo
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMinerInfo
     */
    totalPages?: number;
}

/**
 * 
 * @export
 * @interface PageMinerRewardDetail
 */
export interface PageMinerRewardDetail {
    /**
     * 
     * @type {Array<MinerRewardDetail>}
     * @memberof PageMinerRewardDetail
     */
    content?: Array<MinerRewardDetail>;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerRewardDetail
     */
    empty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerRewardDetail
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerRewardDetail
     */
    last?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageMinerRewardDetail
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMinerRewardDetail
     */
    numberOfElements?: number;
    /**
     * 
     * @type {Pageable}
     * @memberof PageMinerRewardDetail
     */
    pageable?: Pageable;
    /**
     * 
     * @type {number}
     * @memberof PageMinerRewardDetail
     */
    size?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageMinerRewardDetail
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageMinerRewardDetail
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMinerRewardDetail
     */
    totalPages?: number;
}

/**
 * 
 * @export
 * @interface PageMinerTradeInfo
 */
export interface PageMinerTradeInfo {
    /**
     * 
     * @type {Array<MinerTradeInfo>}
     * @memberof PageMinerTradeInfo
     */
    content?: Array<MinerTradeInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerTradeInfo
     */
    empty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerTradeInfo
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMinerTradeInfo
     */
    last?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageMinerTradeInfo
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMinerTradeInfo
     */
    numberOfElements?: number;
    /**
     * 
     * @type {Pageable}
     * @memberof PageMinerTradeInfo
     */
    pageable?: Pageable;
    /**
     * 
     * @type {number}
     * @memberof PageMinerTradeInfo
     */
    size?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageMinerTradeInfo
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageMinerTradeInfo
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMinerTradeInfo
     */
    totalPages?: number;
}

/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    pageNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    pageSize?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    paged?: boolean;
    /**
     * 
     * @type {Sort}
     * @memberof Pageable
     */
    sort?: Sort;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    unpaged?: boolean;
}

/**
 * 
 * @export
 * @interface PoolInfo
 */
export interface PoolInfo {
    /**
     * 
     * @type {number}
     * @memberof PoolInfo
     */
    availableMinerCount?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolInfo
     */
    estimatedRewardPerMiner?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolInfo
     */
    price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolInfo
     */
    totalEos?: string;
}

/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    empty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    sorted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    unsorted?: boolean;
}


/**
 * AccountControllerApi - fetch parameter creator
 * @export
 */
export const AccountControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAccountInfo
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoUsingGET(account: string, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getAccountInfoUsingGET.');
            }
            const localVarPath = `/account/{account}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActiveMiner
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveMinerUsingGET(account: string, page?: number, size?: number, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getActiveMinerUsingGET.');
            }
            const localVarPath = `/account/{account}/activeMiner`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMinerDetailPage
         * @param {string} account account
         * @param {number} minerId minerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerDetailPageUsingGET(account: string, minerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getMinerDetailPageUsingGET.');
            }
            // verify required parameter 'minerId' is not null or undefined
            if (minerId === null || minerId === undefined) {
                throw new RequiredError('minerId','Required parameter minerId was null or undefined when calling getMinerDetailPageUsingGET.');
            }
            const localVarPath = `/account/{account}/miner/{minerId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"minerId"}}`, encodeURIComponent(String(minerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMinerRewardDetailInfo
         * @param {string} account account
         * @param {number} minerId minerId
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerRewardDetailInfoUsingGET(account: string, minerId: number, page?: number, size?: number, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getMinerRewardDetailInfoUsingGET.');
            }
            // verify required parameter 'minerId' is not null or undefined
            if (minerId === null || minerId === undefined) {
                throw new RequiredError('minerId','Required parameter minerId was null or undefined when calling getMinerRewardDetailInfoUsingGET.');
            }
            const localVarPath = `/account/{account}/miner/{minerId}/minerRewardDetail`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"minerId"}}`, encodeURIComponent(String(minerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMinerTrade
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerTradeUsingGET(account: string, page?: number, size?: number, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getMinerTradeUsingGET.');
            }
            const localVarPath = `/account/{account}/minerTrade`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSoldMiner
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoldMinerUsingGET(account: string, page?: number, size?: number, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getSoldMinerUsingGET.');
            }
            const localVarPath = `/account/{account}/soldMiner`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountControllerApi - functional programming interface
 * @export
 */
export const AccountControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAccountInfo
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoUsingGET(account: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountInfo> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getAccountInfoUsingGET(account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getActiveMiner
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveMinerUsingGET(account: string, page?: number, size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMinerInfo> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getActiveMinerUsingGET(account, page, size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getMinerDetailPage
         * @param {string} account account
         * @param {number} minerId minerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerDetailPageUsingGET(account: string, minerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MinerDetailPage> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getMinerDetailPageUsingGET(account, minerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getMinerRewardDetailInfo
         * @param {string} account account
         * @param {number} minerId minerId
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerRewardDetailInfoUsingGET(account: string, minerId: number, page?: number, size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMinerRewardDetail> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getMinerRewardDetailInfoUsingGET(account, minerId, page, size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getMinerTrade
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerTradeUsingGET(account: string, page?: number, size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMinerTradeInfo> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getMinerTradeUsingGET(account, page, size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getSoldMiner
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoldMinerUsingGET(account: string, page?: number, size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMinerInfo> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getSoldMinerUsingGET(account, page, size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountControllerApi - factory interface
 * @export
 */
export const AccountControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getAccountInfo
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoUsingGET(account: string, options?: any) {
            return AccountControllerApiFp(configuration).getAccountInfoUsingGET(account, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getActiveMiner
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveMinerUsingGET(account: string, page?: number, size?: number, options?: any) {
            return AccountControllerApiFp(configuration).getActiveMinerUsingGET(account, page, size, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getMinerDetailPage
         * @param {string} account account
         * @param {number} minerId minerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerDetailPageUsingGET(account: string, minerId: number, options?: any) {
            return AccountControllerApiFp(configuration).getMinerDetailPageUsingGET(account, minerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getMinerRewardDetailInfo
         * @param {string} account account
         * @param {number} minerId minerId
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerRewardDetailInfoUsingGET(account: string, minerId: number, page?: number, size?: number, options?: any) {
            return AccountControllerApiFp(configuration).getMinerRewardDetailInfoUsingGET(account, minerId, page, size, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getMinerTrade
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinerTradeUsingGET(account: string, page?: number, size?: number, options?: any) {
            return AccountControllerApiFp(configuration).getMinerTradeUsingGET(account, page, size, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getSoldMiner
         * @param {string} account account
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoldMinerUsingGET(account: string, page?: number, size?: number, options?: any) {
            return AccountControllerApiFp(configuration).getSoldMinerUsingGET(account, page, size, options)(fetch, basePath);
        },
    };
};

/**
 * AccountControllerApi - object-oriented interface
 * @export
 * @class AccountControllerApi
 * @extends {BaseAPI}
 */
export class AccountControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAccountInfo
     * @param {string} account account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getAccountInfoUsingGET(account: string, options?: any) {
        return AccountControllerApiFp(this.configuration).getAccountInfoUsingGET(account, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getActiveMiner
     * @param {string} account account
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getActiveMinerUsingGET(account: string, page?: number, size?: number, options?: any) {
        return AccountControllerApiFp(this.configuration).getActiveMinerUsingGET(account, page, size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getMinerDetailPage
     * @param {string} account account
     * @param {number} minerId minerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getMinerDetailPageUsingGET(account: string, minerId: number, options?: any) {
        return AccountControllerApiFp(this.configuration).getMinerDetailPageUsingGET(account, minerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getMinerRewardDetailInfo
     * @param {string} account account
     * @param {number} minerId minerId
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getMinerRewardDetailInfoUsingGET(account: string, minerId: number, page?: number, size?: number, options?: any) {
        return AccountControllerApiFp(this.configuration).getMinerRewardDetailInfoUsingGET(account, minerId, page, size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getMinerTrade
     * @param {string} account account
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getMinerTradeUsingGET(account: string, page?: number, size?: number, options?: any) {
        return AccountControllerApiFp(this.configuration).getMinerTradeUsingGET(account, page, size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getSoldMiner
     * @param {string} account account
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getSoldMinerUsingGET(account: string, page?: number, size?: number, options?: any) {
        return AccountControllerApiFp(this.configuration).getSoldMinerUsingGET(account, page, size, options)(this.fetch, this.basePath);
    }

}

/**
 * HelloControllerApi - fetch parameter creator
 * @export
 */
export const HelloControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sellminer
         * @param {number} from from
         * @param {number} to to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellminerUsingGET(from: number, to: number, options: any = {}): FetchArgs {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling sellminerUsingGET.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling sellminerUsingGET.');
            }
            const localVarPath = `/sellminer/{from}/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary simulate
         * @param {number} afterSeconds afterSeconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateUsingGET(afterSeconds: number, options: any = {}): FetchArgs {
            // verify required parameter 'afterSeconds' is not null or undefined
            if (afterSeconds === null || afterSeconds === undefined) {
                throw new RequiredError('afterSeconds','Required parameter afterSeconds was null or undefined when calling simulateUsingGET.');
            }
            const localVarPath = `/simulate/{afterSeconds}`
                .replace(`{${"afterSeconds"}}`, encodeURIComponent(String(afterSeconds)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatereward
         * @param {number} count count
         * @param {number} t t
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updaterewardUsingGET(count: number, t: number, options: any = {}): FetchArgs {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling updaterewardUsingGET.');
            }
            // verify required parameter 't' is not null or undefined
            if (t === null || t === undefined) {
                throw new RequiredError('t','Required parameter t was null or undefined when calling updaterewardUsingGET.');
            }
            const localVarPath = `/updatereward/{t}/{count}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"t"}}`, encodeURIComponent(String(t)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelloControllerApi - functional programming interface
 * @export
 */
export const HelloControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sellminer
         * @param {number} from from
         * @param {number} to to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellminerUsingGET(from: number, to: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = HelloControllerApiFetchParamCreator(configuration).sellminerUsingGET(from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary simulate
         * @param {number} afterSeconds afterSeconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateUsingGET(afterSeconds: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = HelloControllerApiFetchParamCreator(configuration).simulateUsingGET(afterSeconds, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary updatereward
         * @param {number} count count
         * @param {number} t t
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updaterewardUsingGET(count: number, t: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = HelloControllerApiFetchParamCreator(configuration).updaterewardUsingGET(count, t, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HelloControllerApi - factory interface
 * @export
 */
export const HelloControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary sellminer
         * @param {number} from from
         * @param {number} to to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellminerUsingGET(from: number, to: number, options?: any) {
            return HelloControllerApiFp(configuration).sellminerUsingGET(from, to, options)(fetch, basePath);
        },
        /**
         * 
         * @summary simulate
         * @param {number} afterSeconds afterSeconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateUsingGET(afterSeconds: number, options?: any) {
            return HelloControllerApiFp(configuration).simulateUsingGET(afterSeconds, options)(fetch, basePath);
        },
        /**
         * 
         * @summary updatereward
         * @param {number} count count
         * @param {number} t t
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updaterewardUsingGET(count: number, t: number, options?: any) {
            return HelloControllerApiFp(configuration).updaterewardUsingGET(count, t, options)(fetch, basePath);
        },
    };
};

/**
 * HelloControllerApi - object-oriented interface
 * @export
 * @class HelloControllerApi
 * @extends {BaseAPI}
 */
export class HelloControllerApi extends BaseAPI {
    /**
     * 
     * @summary sellminer
     * @param {number} from from
     * @param {number} to to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloControllerApi
     */
    public sellminerUsingGET(from: number, to: number, options?: any) {
        return HelloControllerApiFp(this.configuration).sellminerUsingGET(from, to, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary simulate
     * @param {number} afterSeconds afterSeconds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloControllerApi
     */
    public simulateUsingGET(afterSeconds: number, options?: any) {
        return HelloControllerApiFp(this.configuration).simulateUsingGET(afterSeconds, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary updatereward
     * @param {number} count count
     * @param {number} t t
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloControllerApi
     */
    public updaterewardUsingGET(count: number, t: number, options?: any) {
        return HelloControllerApiFp(this.configuration).updaterewardUsingGET(count, t, options)(this.fetch, this.basePath);
    }

}

/**
 * PoolControllerApi - fetch parameter creator
 * @export
 */
export const PoolControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getForgeInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgeInfoUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pool/forge/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getForgePage
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgePageUsingGET(account: string, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getForgePageUsingGET.');
            }
            const localVarPath = `/pool/forgePage/{account}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMinePage
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinePageUsingGET(account: string, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getMinePageUsingGET.');
            }
            const localVarPath = `/pool/minePage/{account}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPoolInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolInfoUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pool/mine/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRecentTrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMineRecentTradesUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pool/mine/recentTrades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getForgeRecentTrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgeRecentTradesUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pool/forge/recentTrades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoolControllerApi - functional programming interface
 * @export
 */
export const PoolControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getForgeInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgeInfoUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ForgeInfo> {
            const localVarFetchArgs = PoolControllerApiFetchParamCreator(configuration).getForgeInfoUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getForgePage
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgePageUsingGET(account: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ForgePage> {
            const localVarFetchArgs = PoolControllerApiFetchParamCreator(configuration).getForgePageUsingGET(account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getMinePage
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinePageUsingGET(account: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MinePage> {
            const localVarFetchArgs = PoolControllerApiFetchParamCreator(configuration).getMinePageUsingGET(account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getPoolInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolInfoUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PoolInfo> {
            const localVarFetchArgs = PoolControllerApiFetchParamCreator(configuration).getPoolInfoUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getRecentTrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMineRecentTradesUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ForgeTradeInfo>> {
            const localVarFetchArgs = PoolControllerApiFetchParamCreator(configuration).getMineRecentTradesUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
                /**
         * 
         * @summary getRecentTrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgeRecentTradesUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ForgeTradeInfo>> {
            const localVarFetchArgs = PoolControllerApiFetchParamCreator(configuration).getForgeRecentTradesUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PoolControllerApi - factory interface
 * @export
 */
export const PoolControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getForgeInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgeInfoUsingGET(options?: any) {
            return PoolControllerApiFp(configuration).getForgeInfoUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary getForgePage
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgePageUsingGET(account: string, options?: any) {
            return PoolControllerApiFp(configuration).getForgePageUsingGET(account, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getMinePage
         * @param {string} account account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinePageUsingGET(account: string, options?: any) {
            return PoolControllerApiFp(configuration).getMinePageUsingGET(account, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getPoolInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolInfoUsingGET(options?: any) {
            return PoolControllerApiFp(configuration).getPoolInfoUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary getRecentTrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMineRecentTradesUsingGET(options?: any) {
            return PoolControllerApiFp(configuration).getMineRecentTradesUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary getRecentTrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForgeRecentTradesUsingGET(options?: any) {
            return PoolControllerApiFp(configuration).getForgeRecentTradesUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * PoolControllerApi - object-oriented interface
 * @export
 * @class PoolControllerApi
 * @extends {BaseAPI}
 */
export class PoolControllerApi extends BaseAPI {
    /**
     * 
     * @summary getForgeInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolControllerApi
     */
    public getForgeInfoUsingGET(options?: any) {
        return PoolControllerApiFp(this.configuration).getForgeInfoUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getForgePage
     * @param {string} account account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolControllerApi
     */
    public getForgePageUsingGET(account: string, options?: any) {
        return PoolControllerApiFp(this.configuration).getForgePageUsingGET(account, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getMinePage
     * @param {string} account account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolControllerApi
     */
    public getMinePageUsingGET(account: string, options?: any) {
        return PoolControllerApiFp(this.configuration).getMinePageUsingGET(account, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getPoolInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolControllerApi
     */
    public getPoolInfoUsingGET(options?: any) {
        return PoolControllerApiFp(this.configuration).getPoolInfoUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getRecentTrades
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolControllerApi
     */
    public getMineRecentTradesUsingGET(options?: any) {
        return PoolControllerApiFp(this.configuration).getMineRecentTradesUsingGET(options)(this.fetch, this.basePath);
    }

        /**
     * 
     * @summary getRecentTrades
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolControllerApi
     */
    public getForgeRecentTradesUsingGET(options?: any) {
        return PoolControllerApiFp(this.configuration).getForgeRecentTradesUsingGET(options)(this.fetch, this.basePath);
    }

}

